/**
  @page PWR_CurrentConsumption PWR Current Consumption example

  @verbatim
  ******************** (C) COPYRIGHT 2015 STMicroelectronics *******************
  * @file    PWR/PWR_CurrentConsumption/readme.txt 
  * @author  MCD Application Team
  * @version V1.4.0
  * @date    13-November-2015
  * @brief   Description of the PWR Current Consumption example.
  ******************************************************************************
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example shows how to configure the system to measure different
Low Power modes current consumption.

The Low Power modes are:
  - Sleep Mode
  - STOP mode without RTC wake-up 
  - STOP mode with RTC wake-up 
  - STANDBY mode without RTC wake-up 
  - STANDBY mode with RTC wake-up 


To run this example, user has to follow the following steps:
 1. Select the Low power modes to be measured by uncommenting the corresponding
    line inside the stm32f3xx_lp_modes.h file.
    @code
       /*#define SLEEP_MODE       */
       /*#define STOP_MODE        */
       #define STOP_RTC_MODE       
       /*#define STANDBY_MODE     */
       /*#define STANDBY_RTC_MODE */
    @endcode       

 2. Use an external amperemeter to measure the IDD current. 

 3. This example can not be used in DEBUG mode,this is due to the fact that the 
    Cortex-M4 core is no longer clocked during low power mode so debugging 
    features are disbaled

Here below a detailed description of the example code:

  @verbatim

 1. After reset, the program waits for USER button connected to PC.13 to be 
    pressed - green LED (LED2) is blinking - to enter the selected low power mode.
    
     - When the RTC is not used in the low power mode configuration, press
       again the Key button to exit the low power mode.

     - When the RTC is used, the wakeup from low power mode is automatically 
       generated by the RTC (after 20s).
     
  2. After exit from low power mode, LED_GREEN is blinking.
    
  3. The sequence can be repeated from step 1 in following the same steps (pressing
     the USER button to enter the desired low power mode)

   Low power modes description:

    - Sleep Mode
    ============  
            - System Running at PLL (64 MHz)
            - Flash 5 wait state
            - Instruction and Data caches ON
            - Prefetch OFF       
            - Code running from Internal FLASH
            - All peripherals disabled.
            - Wakeup using EXTI Line (USER Button PC.13)
            
    - STOP Mode
    ==========================================
            - RTC Clocked by LSI
            - Regulator in LP mode
            - HSI, HSE OFF and LSI if not used as RTC Clock source
            - No IWDG
            - Wakeup using EXTI Line (USER Button PC.13)

    - STOP Mode with RTC clocked by LSI 
    ==========================================
            - RTC Clocked by LSI
            - Regulator in LP mode
            - HSI, HSE OFF and LSI if not used as RTC Clock source
            - No IWDG
            - Automatic Wakeup using RTC clocked by LSI (after ~20s)

    - STANDBY Mode
    ==============
            - RTC OFF
            - IWDG and LSI OFF
            - Wakeup using WakeUp Pin (USER Button PC.13) 
                        
    - STANDBY Mode with RTC clocked by LSI 
    ==========================================
            - RTC Clocked by LSI
            - IWDG OFF and LSI OFF  if not used as RTC Clock source
            - Automatic Wakeup using RTC clocked by LSI (after ~20s)


   @endverbatim

@note Care must be taken when using HAL_Delay(), this function provides accurate delay (in milliseconds)
      based on variable incremented in SysTick ISR. This implies that if HAL_Delay() is called from
      a peripheral ISR process, then the SysTick interrupt must have higher priority (numerically lower)
      than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
      To change the SysTick interrupt priority you have to use HAL_NVIC_SetPriority() function.
      
@note The application need to ensure that the SysTick time base is always set to 1 millisecond
      to have correct HAL operation.

@par Directory contents 

  - PWR/PWR_CurrentConsumption/Inc/stm32f3xx_hal_conf.h     HAL configuration file
  - PWR/PWR_CurrentConsumption/Inc/stm32f3xx_it.h           Interrupt handlers header file
  - PWR/PWR_CurrentConsumption/Inc/main.h                   Header for main.c module 
  - PWR/PWR_CurrentConsumption/Inc/stm32f3xx_lp_modes.h     STM32F3xx Low Power Modes header file
  - PWR/PWR_CurrentConsumption/Src/stm32f3xx_it.c           Interrupt handlers
  - PWR/PWR_CurrentConsumption/Src/main.c                   Main program
  - PWR/PWR_CurrentConsumption/Src/stm32f3xx_hal_msp.c      HAL MSP module
  - PWR/PWR_CurrentConsumption/Src/stm32f3xx_lp_modes.c     STM32F3xx Low Power Modes source file
  - PWR/PWR_CurrentConsumption/Src/system_stm32f3xx.c       STM32F3xx system source file


@par Hardware and Software environment 

  - This example runs on STM32F301xx and STM32F302xx devices.   
  - This example has been tested with STMicroelectronics STM32 NUCLEO rev C.
    board and can be easily tailored to any other supported device 
    and development board.
   
  - STM32 NUCLEO rev C Set-up
    - Use LED_GREEN (LED2) connected to PB.13 pin.
      * LED_GREEN (LED2) toggles while waiting for the USER button to be pressed to enter the low power mode.
    - Use USER Button connected to PC.13 pin.
    - Connect an amperemeter to JP6 to measure the IDD current

@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
